#!/bin/bash
#titre          : iptables.rules
#description    : Script de configuration d'un parefeu IPv4/IPv6 via Iptables.
#auteur         : Cyberman
#date           : 31-08-2016
#version        : 0.2    
#usage          : https://github.com/cyberdocfr/iptables_ipv4_ipv6_systemd
#notes          :
#=======================================================================#

#########################################################################
### Étape0: Définitions des variables et vérifications des prérequis.
## Vérification des prérequis
# On doit disposer des droits root pour continuer
if [ "$(id -u)" != "0" ]; then
   echo "Vous devez disposer des droits root pour executer ce script" 1>&2
   exit 1
fi
## Définitions des variables
# IPv4
IPT=/sbin/iptables
#IPv6
IP6T=/sbin/ip6tables
#########################################################################
### Étape1: Préparation du système avant l'application de règles
## Efface toutes les règles en cours. -F toutes. -X utilisateurs
# IPv4
$IPT -t filter -F
$IPT -t filter -X
$IPT -t nat -F
$IPT -t nat -X
$IPT -t mangle -F
$IPT -t mangle -X
# IPv6
$IP6T -t filter -F
$IP6T -t filter -X
$IP6T -t nat -F
$IP6T -t nat -X
$IP6T -t mangle -F
$IP6T -t mangle -X
## Permettre à une connexion ouverte de recevoir du trafic autorise dans un sans (state full)
# IPv4
$IPT -t filter -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPT -t filter -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPT -t filter -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
# IPv6
$IP6T -t filter -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IP6T -t filter -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IP6T -t filter -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
## Stratégie (-P) par défaut : on bloque tout par defaut
# IPv4
$IPT -P INPUT ACCEPT # REMPLACER ACCEPT PAR DROP UNE FOIS VOS REGLES DE FLUX ENTRANTS PERSONNALISEES
$IPT -P FORWARD DROP
$IPT -P OUTPUT DROP
# IPv6
$IP6T -P INPUT DROP
$IP6T -P FORWARD DROP
$IP6T -P OUTPUT DROP
## On autorise les flux en Loopback
# IPv4
$IPT -t filter -A INPUT -i lo -j ACCEPT
$IPT -t filter -A OUTPUT -o lo -j ACCEPT
# IPv6
$IP6T -A INPUT -s ::1 -d ::1 -j ACCEPT
# On autorise l'ICMP sortant
# ICMPv4: J'envoie tous les codes ICMP de tous types à TOUT LE MONDE
$IPT -t filter -A OUTPUT -p icmp -j ACCEPT
# ICMPv6: J'envoie tous les codes ICMP de tous types à TOUT LE MONDE
$IP6T -t filter -A OUTPUT -p ipv6-icmp -j ACCEPT
#########################################################################
### Étape2: Protection face aux attaques réseaux connues.
## Blocage des scans de ports connus.
## NULL-SCAN - tous les flags sont a 0
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "IPTABLES IPv4 NULL-SCAN"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
## XMAS-SCAN - tous les flags sont a 1
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "IPTABLES IPv4 XMAS-SCAN"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
## SYNFIN-SCAN  - les flags SYN et FIN sont a 1
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j LOG --log-prefix "IPTABLES IPv4 SYNFIN-SCAN"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j DROP
## NMAP-XMAS-SCAN - les flags URG,PSH,FIN sont a1
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,FIN -j LOG --log-prefix "IPTABLES IPv4 NMAP-XMAS-SCAN"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP
## FIN-SCAN   - les flags FIN est a 1
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL FIN -j LOG --log-prefix "IPTABLES IPv4 FIN-SCAN"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL FIN -j DROP
## NMAP-ID - les flags URG,PSH,SYN,FIN sont a 1
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j LOG --log-prefix "IPTABLES IPv4 NMAP-ID"
$IPT -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j DROP
## SYN-RST - les flags SYN-RST sont à 1
$IPT -t filter -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "IPTABLES IPv4 SYN-RST"
$IPT -t filter -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
## Protection face au SYN FLOOD (uniquement vieux OS affectés)
$IPT -t filter -N syn-flood
$IPT -t filter -A INPUT -p tcp --syn -j syn-flood
$IPT -t filter -A syn-flood -m limit --limit 1/sec --limit-burst 4 -j RETURN
$IPT -t filter -A syn-flood -j LOG --log-prefix "IPTABLES SYN-FLOOD"
$IPT -t filter -A syn-flood -j DROP
## On vérifie que ce les connexions TCP débutent bien par un SYN
$IPT -t filter -A INPUT -p tcp ! --syn -m state --state NEW -j LOG  --log-prefix "IPTABLES SYN-FLOOD"
$IPT -t filter -A INPUT -p tcp ! --syn -m state --state NEW -j DROP
## Protection au scanneur de ports (nmap,...)
$IPT -t filter -N port-scan
$IPT -t filter -A INPUT -i eth0 -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j port-scan
$IPT -t filter -A port-scan -m limit --limit 1/s --limit-burst 4 -j RETURN
$IPT -t filter -A port-scan -j LOG --log-prefix "IPTABLES SCAN DE PORT"
$IPT -t filter -A port-scan -j DROP
## Blocage des paquets anormaux/inutiles.
# IPv6: On désactive les paquets RH0 devenus obsolètes (ils sont dépréciés -> RFC 5095)
$IP6T -A INPUT -m rt --rt-type 0 -j DROP
$IP6T -A OUTPUT -m rt --rt-type 0 -j DROP
$IP6T -A FORWARD -m rt --rt-type 0 -j DROP
# IPv6: On limite le nombres de requêtes PING6 / seconde
$IP6T -A INPUT -p icmpv6 --icmpv6-type echo-request -m limit --limit 900/min -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type echo-reply -m limit --limit 900/min -j ACCEPT
# IPv6: On accepte que les messages de notre passerelle si le TTL est cohérent
$IP6T -A INPUT -p icmpv6 --icmpv6-type router-advertisement -m hl --hl-eq 255 -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type redirect -m hl --hl-eq 255 -j ACCEPT
# IPv6: On limite les messages NDP uniquement au LAN
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type neighbour-solicitation -m hl --hl-eq 255 -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type neighbour-advertisement -m hl --hl-eq 255 -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type router-solicitation -m hl --hl-eq 255 -j ACCEPT
#########################################################################
### Étape3: On charge les blacklistes d'adresses IP (v4 et v6).
# IPv4
#########################################################################
### Étape4: Règles de flux personnalisées.
#-----------------------------------------------------------------------#
## Gestion affinée du protocole ICMP et ICMPv6
# IPv4: Messages ICMP utiles et non dangereux
# IPv6: Messages ICMPv6 utiles et non dangereux
$IP6T -A INPUT -p icmpv6 --icmpv6-type destination-unreachable -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type packet-too-big -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type time-exceeded -j ACCEPT
$IP6T -A INPUT -p icmpv6 --icmpv6-type parameter-problem -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type destination-unreachable -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type packet-too-big -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type time-exceeded -j ACCEPT
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type parameter-problem -j ACCEPT
$IP6T -A FORWARD -p icmpv6 -j DROP
#-----------------------------------------------------------------------#
## Modèles de règles, copier/coller juste en dessous puis décommenter 
#$IPT -t filter -A INPUT -p tcp --dport 22 -j ACCEPT   ### IPv4: On autorise le SSH en entrée depuis n'importe qui
#$IP6T -t filter -A INPUT -p tcp --dport 22 -j ACCEPT  ### IPv6: On autorise le SSH en entrée depuis n'importe qui
#$IPT -t filter -A INPUT -s 192.168.1.5 -p tcp --dport 80 -j ACCEPT   ### IPv4: On autorise HTTP en entrée depuis 192.168.1.5 uniquement
#$IP6T -t filter -A INPUT -p tcp --dport 22 -j ACCEPT  ### IPv6: On autorise le SSH en entrée depuis n'importe qui
#-----------------------------------------------------------------------#
## Règles concernant les flux entrants (chaine INPUT)
# IPv4
# SSH sortant autorisés depuis n'importe qui
$IPT -t filter -A INPUT -p tcp --dport 22 -j ACCEPT
# IPv6
$IP6T -t filter -A INPUT -p tcp --dport 22 -j ACCEPT
#-----------------------------------------------------------------------#
## Règles concernant les flux sortants (chaine OUTPUT)
# IPv4
# HTTP et HTTPS sortant autorisés vers n'importe qui
$IPT -t filter -A OUTPUT -p tcp --dport 80 -j ACCEPT
# DNS sortant autorisé vers n'importe qui
$IPT -t filter -A OUTPUT -p tcp --dport 53 -j ACCEPT
$IPT -t filter -A OUTPUT -p udp --dport 53 -j ACCEPT
# NTP sortant autorisé vers n'importe qui
$IPT -t filter -A OUTPUT -p udp --dport 123 -j ACCEPT
# FTP sortant autorisé vers n'importe qui
$IPT -t filter -A OUTPUT -p tcp --dport 21 -j ACCEPT
# SMTP sortant autorisé vers n'importe qui
$IPT -t filter -A OUTPUT -p tcp --dport 25 -j ACCEPT
# IPv6
# DNS sortant autorisé vers n'importe qui
$IP6T -t filter -A OUTPUT -p tcp --dport 53 -j ACCEPT
$IP6T -t filter -A OUTPUT -p udp --dport 53 -j ACCEPT
# NTP sortant autorisé vers n'importe qui
$IP6T -t filter -A OUTPUT -p udp --dport 123 -j ACCEPT
# FTP sortant autorisé vers n'importe qui
$IP6T -t filter -A OUTPUT -p tcp --dport 21 -j ACCEPT
# SMTP sortant autorisé vers n'importe qui
$IP6T -t filter -A OUTPUT -p tcp --dport 25 -j ACCEPT
#-----------------------------------------------------------------------#
## Règles concernant les flux en transit (chaine FORWARD)
#----------------------------------#
## Activation (ou pas) du routage (suffit de décommenter la ligne pour l'activer)
# IPv4
#echo "1" > /proc/sys/net/ipv4/ip_forward
# IPv6
#echo "1" >/proc/sys/net/ipv6/conf/all/forwarding
#----------------------------------#
# IPv4
# IPv6
#########################################################################
### Étape5: Marquage des flux bloqués pour faciliter la recherche dans les logs
## IPv4: On mets en place un marquage pour faciliter l'exploitation des logs
#Création de la chaine dédiée au marquage des flux en transit bloqués 
$IPT -N LOG_DROP_FORWARD
$IPT -A LOG_DROP_FORWARD -j LOG --log-prefix '[IPTABLES IPv4 FORWARD DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IPT -A LOG_DROP_FORWARD -j DROP #Apres avoir marqué les flux bloqués, on les DROP.  
#Création de la chaine dédiée au marquage des flux entrant bloqués
$IPT -N LOG_DROP_INPUT 
$IPT -A LOG_DROP_INPUT -j LOG --log-prefix '[IPTABLES IPv4 INPUT DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IPT -A LOG_DROP_INPUT -j DROP #Apres avoir marqué les flux bloqués, on les DROP.  
#Création de la chaine dédiée au marquage des flux sortants bloqués
$IPT -N LOG_DROP_OUTPUT
$IPT -A LOG_DROP_OUTPUT -j LOG --log-prefix '[IPTABLES IPv4 OUTPUT DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IPT -A LOG_DROP_OUTPUT -j DROP #Apres avoir marqué les flux bloqués, on les DROP.
#Création de la chaine dédiée au marquage des flux anormaux/inutiles 
$IPT -N LOG_DROP_ANORMAUX
$IPT -A LOG_DROP_ANORMAUX -j LOG --log-prefix '[IPTABLES IPv4 PAQUETS ANORMAUX] : ' #On ajoute un prefixe à tous les flux journalisés
#$IPT -A LOG_DROP_ANORMAUX -j DROP #Apres avoir marqué les flux bloqués, on les DROP.
# On envoi les flux non précédements autorisés dans les chaines qui préfixes les logs.
$IPT -A FORWARD -j LOG_DROP_FORWARD #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe
$IPT -A INPUT -j LOG_DROP_INPUT #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe
#$IPT -A OUTPUT -j LOG_DROP_OUTPUT #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe 
#-----------------------------------------------------------------------#
# IPv6: On mets en place un marquage pour faciliter l'exploitation des logs
#Création de la chaine dédiée au marquage des flux en transit bloqués 
$IP6T -N LOG_DROP_FORWARD
$IP6T -A LOG_DROP_FORWARD -j LOG --log-prefix '[IPTABLES IPv6 FORWARD DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IP6T -A LOG_DROP_FORWARD -j DROP #Apres avoir marqué les flux bloqués, on les DROP.  
#Création de la chaine dédiée au marquage des flux entrant bloqués
$IP6T -N LOG_DROP_INPUT 
$IP6T -A LOG_DROP_INPUT -j LOG --log-prefix '[IPTABLES IPv6 INPUT DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IP6T -A LOG_DROP_INPUT -j DROP #Apres avoir marqué les flux bloqués, on les DROP.  
#Création de la chaine dédiée au marquage des flux sortants bloqués
$IP6T -N LOG_DROP_OUTPUT
$IP6T -A LOG_DROP_OUTPUT -j LOG --log-prefix '[IPTABLES IPv6 OUTPUT DROP] : ' #On ajoute un prefixe à tous les flux journalisés
#$IP6T -A LOG_DROP_OUTPUT -j DROP #Apres avoir marqué les flux bloqués, on les DROP.
#Création de la chaine dédiée au marquage des flux anormaux/inutiles 
$IP6T -N LOG_DROP_ANORMAUX
$IP6T -A LOG_DROP_ANORMAUX -j LOG --log-prefix '[IPTABLES IPv6 PAQUETS ANORMAUX] : ' #On ajoute un prefixe à tous les flux journalisés
#$IP6T -A LOG_DROP_ANORMAUX -j DROP #Apres avoir marqué les flux bloqués, on les DROP.  
# On envoi les flux non précédements autorisés dans les chaines qui préfixes les logs.
$IP6T -A FORWARD -j LOG_DROP_FORWARD #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe
$IP6T -A INPUT -j LOG_DROP_INPUT #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe
#$IP6T -A OUTPUT -j LOG_DROP_OUTPUT #On envoie tout ce qui n'est pas autorisé dans la chaine LOG_DROP pour marquer les logs d'un prefixe
# On tag les paquets ICMPv6 d'une manière particuliere
$IP6T -A INPUT -p icmpv6 -j LOG --log-prefix "IPTABLES ICMPv6 DROP"
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type router-advertisement -j LOG --log-prefix "IPTABLES ICMPv6 RA type"
$IP6T -A OUTPUT -p icmpv6 --icmpv6-type redirect -j LOG --log-prefix "IPTABLES ICMPv6 redirect type"
$IP6T -A INPUT -p icmpv6 -j DROP
#########################################################################
### Étape finale: Le script a chargé l'ensemble des règles IPtables, on affiche à l'administrateur que c'est terminé.
echo "firewall started [OK]"
###FIN

###
# Besoin d'aide ? Une proposition d'évolution ? Rendez-vous sur https://cyberdoc.fr
###
